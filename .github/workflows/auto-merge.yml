name: Auto-PR and Auto-Merge

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches-ignore:
      - main

permissions:
  contents: write
  pull-requests: write
  statuses: read
  checks: read

jobs:
  auto-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.actor == 'dallae'
    outputs:
      pr_number: ${{ fromJSON(steps.create-pr.outputs.result || '{}').pr_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            console.log(`Creating PR from branch: ${branch}`);
            
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Auto PR: Merge ${branch} into main`,
                head: branch,
                base: 'main',
                body: 'This PR was automatically created by the Auto-PR workflow.',
                maintainer_can_modify: true
              });
              return { result: JSON.stringify({ pr_number: pr.number }) };
            } catch (error) {
              if (error.message.includes('A pull request already exists')) {
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${branch}`,
                  base: 'main',
                  state: 'open'
                });
                if (prs.length > 0) {
                  return { result: JSON.stringify({ pr_number: prs[0].number }) };
                } else {
                  throw new Error('Could not find existing PR');
                }
              } else {
                throw error;
              }
            }

  auto-merge:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.user.login == 'dallae') || 
      (github.event_name == 'push' && github.actor == 'dallae')
    needs: [auto-pr]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Pull Request Details
        id: pr_details
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "PR_HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          elif [[ -n "${{ needs.auto-pr.outputs.pr_number }}" ]]; then
            echo "PR_NUMBER=${{ needs.auto-pr.outputs.pr_number }}" >> $GITHUB_ENV
            echo "PR_HEAD_SHA=${{ github.sha }}" >> $GITHUB_ENV
          else
            echo "No PR number available to merge."
            exit 1
          fi

      - name: Diagnose Initial Status Checks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = process.env.PR_NUMBER;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            console.log(`PR Mergeable: ${pr.mergeable}`);
            console.log(`Mergeable State: ${pr.mergeable_state}`);

            const refToCheck = process.env.PR_HEAD_SHA || pr.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: refToCheck
            });

            console.log(`Total check runs: ${checks.total_count}`);
            for (const check of checks.check_runs) {
              console.log(`- ${check.name}: ${check.status} (${check.conclusion || 'N/A'})`);
            }

            try {
              const { data: branch } = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: pr.base.ref
              });
              if (branch.protection?.required_status_checks) {
                console.log("Required Status Checks:");
                console.log(`- Strict: ${branch.protection.required_status_checks.strict}`);
                console.log(`- Contexts: ${JSON.stringify(branch.protection.required_status_checks.contexts)}`);
              } else {
                console.log("No required status checks set.");
              }
            } catch (error) {
              console.log("Error fetching branch protection:", error.message);
            }

      - name: Wait for Validate Check to Succeed
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          check-name: 'validate'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.PR_HEAD_SHA }}
          allowed-conclusions: success
          wait-interval: 15
          verbose: true

      - name: Auto-Merge PR
        if: |
          steps.wait_for_validate.outputs.conclusion == 'success' || 
          steps.wait_for_validate.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = process.env.PR_NUMBER;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const headBranchRef = pr.head.ref;

            if (pr.mergeable !== true || ['blocked', 'dirty'].includes(pr.mergeable_state)) {
              const msg = `‚ùå Auto-merge aborted: PR not mergeable. State: ${pr.mergeable_state}`;
              console.log(msg);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: msg
              });
              core.setFailed(msg);
              return;
            }

            const { data: mergeResult } = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'rebase'
            });

            console.log(`‚úÖ PR #${prNumber} merged. SHA: ${mergeResult.sha}`);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: '‚úÖ Auto-merged after required checks passed.'
            });

            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${headBranchRef}`
              });
              console.log(`üöÆ Deleted branch: ${headBranchRef}`);
            } catch (err) {
              console.warn(`‚ö†Ô∏è Failed to delete branch: ${err.message}`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `‚ö†Ô∏è PR merged, but failed to delete branch \`${headBranchRef}\`. Please delete manually.`
              });
            }
