name: Auto-Merge Owner's PRs
on:
  pull_request:
    types: [opened, reopened, synchronize]
permissions:
  contents: write
  pull-requests: write
jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dallae'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Get Pull Request Details
        id: pr_details
        run: |
          echo "Pull Request Number: ${{ github.event.pull_request.number }}"
          echo "Pull Request Title: ${{ github.event.pull_request.title }}"
          echo "Pull Request URL: ${{ github.event.pull_request.html_url }}"
      
      - name: Wait for status checks to complete
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const MAX_ATTEMPTS = 10;
            const DELAY_SECONDS = 30;
            
            for (let attempt = 0; attempt < MAX_ATTEMPTS; attempt++) {
              console.log(`Checking status checks, attempt ${attempt + 1}/${MAX_ATTEMPTS}`);
              
              // Get the combined status
              const { data: status } = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha
              });
              
              // Get check runs
              const { data: checks } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha
              });
              
              console.log(`Combined status: ${status.state}`);
              console.log(`Check runs: ${checks.total_count}`);
              
              // If there are no pending checks and status is success
              if (status.state === 'success' && 
                  !checks.check_runs.some(check => check.status !== 'completed' || check.conclusion !== 'success')) {
                console.log("All status checks have passed!");
                break;
              }
              
              // If this is the last attempt, just continue
              if (attempt === MAX_ATTEMPTS - 1) {
                console.log("Some status checks are still pending or failing, but proceeding anyway");
                break;
              }
              
              // Sleep before trying again
              console.log(`Waiting ${DELAY_SECONDS} seconds before retrying...`);
              await new Promise(resolve => setTimeout(resolve, DELAY_SECONDS * 1000));
            }
      
      - name: Check PR mergeable status
        id: check_mergeable
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            // Wait a bit to make sure GitHub has calculated mergeable status
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            
            console.log(`PR mergeable status: ${pr.mergeable}`);
            console.log(`PR mergeable state: ${pr.mergeable_state}`);
            
            // Set output for use in later steps
            return {
              mergeable: pr.mergeable,
              mergeable_state: pr.mergeable_state
            };
      
      - name: Enable Auto-Merge
        if: steps.check_mergeable.outputs.result != 'null' && fromJSON(steps.check_mergeable.outputs.result).mergeable == true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            try {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
              
              console.log("Attempting to enable auto-merge with REBASE strategy");
              
              await github.graphql(
                `mutation ($prId: ID!, $mergeType: PullRequestMergeMethod!) {
                  enablePullRequestAutoMerge(input: {
                    pullRequestId: $prId,
                    mergeMethod: $mergeType
                  }) { clientMutationId }
                }`,
                { prId: pr.node_id, mergeType: "REBASE" }
              );
              
              console.log("Auto-merge enabled successfully!");
            } catch (error) {
              console.log("Failed to enable auto-merge:");
              console.log(error);
              
              // Try a fallback method - direct merge if auto-merge fails
              if (error.message.includes("unstable status")) {
                console.log("Attempting direct merge as fallback...");
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  merge_method: 'rebase'
                });
                console.log("Direct merge completed successfully!");
              } else {
                throw error;
              }
            }
