name: Auto-Merge Owner's PRs

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dallae'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Pull Request Details
        id: pr_details
        run: |
          echo "Pull Request Number: ${{ github.event.pull_request.number }}"
          echo "Pull Request Title: ${{ github.event.pull_request.title }}"
          echo "Pull Request URL: ${{ github.event.pull_request.html_url }}"

      - name: Ensure Status Checks Pass
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });
            const failedChecks = checks.check_runs.filter(run => run.conclusion !== 'success');
            if (failedChecks.length > 0) {
              throw new Error(`Failed checks: ${failedChecks.map(c => c.name).join(', ')}`);
            }

      - name: Ensure Required Approvals
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const approvals = reviews.filter(review => review.state === 'APPROVED');
            if (approvals.length < 1) {  // Replace with the required number of approvals
              throw new Error('Not enough approvals to enable auto-merge.');
            }

      - name: Verify Branch Protection
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { data: branchProtection } = await github.rest.repos.getBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: context.payload.pull_request.base.ref
            });
            console.log("Branch Protection Rules:", branchProtection);

            // Check status checks
            if (branchProtection.required_status_checks) {
              if (!branchProtection.required_status_checks.contexts || branchProtection.required_status_checks.contexts.length === 0) {
                throw new Error('No required status checks are set.');
              }
              console.log("Required Status Checks:", branchProtection.required_status_checks.contexts);
            }

            // Check required approvals
            if (branchProtection.required_pull_request_reviews) {
              console.log("Required Pull Request Reviews:", branchProtection.required_pull_request_reviews);
              if (branchProtection.required_pull_request_reviews.required_approving_review_count > 0) {
                console.log(`Required Approvals Count: ${branchProtection.required_pull_request_reviews.required_approving_review_count}`);
              }
            }

            // Check whether branch is restricted
            if (branchProtection.restrictions) {
              console.log("Branch Restrictions:", branchProtection.restrictions);
            }

            // Fail if any branch protection rule is violated
            if (!branchProtection) {
              throw new Error('Branch protection rules are not satisfied.');
            }

      - name: Enable Auto-Merge
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            await github.graphql(
              `mutation ($prId: ID!, $mergeType: PullRequestMergeMethod!) {
                enablePullRequestAutoMerge(input: {
                  pullRequestId: $prId,
                  mergeMethod: $mergeType
                }) { clientMutationId }
              }`,
              { prId: pr.node_id, mergeType: "REBASE" }
            );

