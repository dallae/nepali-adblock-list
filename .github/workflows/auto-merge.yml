name: Auto-Merge Owner's PRs

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dallae'  # Only run for your own PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Use v4 (ensure repository allows it)

      - name: Get Pull Request Details
        run: |
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"

      - name: Wait for Status Checks
        uses: fountainhead/action-wait-for-check@v2.0.0  # Wait for all checks to complete
        with:
          token: ${{ secrets.PAT }}
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: "all"
          timeout-seconds: 600

      - name: Verify Mergeability
        id: checks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            // Check 1: Ensure PR is mergeable
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            if (pr.data.mergeable !== true) {
              core.setFailed("PR has conflicts or is not mergeable");
            }

            // Check 2: Verify required approvals
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const approvedReviews = reviews.data.filter(
              review => review.state === "APPROVED"
            );
            
            if (approvedReviews.length < 1) {  # Adjust based on repo rules
              core.setFailed("PR lacks required approvals");
            }

      - name: Enable Auto-Merge
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}  # PAT with `repo` scope
          script: |
            try {
              await github.graphql(
                `mutation ($prId: ID!, $mergeType: PullRequestMergeMethod!) {
                  enablePullRequestAutoMerge(input: {
                    pullRequestId: $prId,
                    mergeMethod: $mergeType
                  }) { clientMutationId }
                }`,
                { 
                  prId: "${{ github.event.pull_request.node_id }}",
                  mergeType: "REBASE"  # Or "MERGE"/"SQUASH"
                }
              );
              console.log("Auto-merge enabled successfully!");
            } catch (error) {
              core.error("Auto-merge failed: " + error.message);
              core.setFailed(error.message);
            }