name: Auto-Merge Owner's PRs

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: write
  pull-requests: write
  # Needed by wait-on-check-action to read check statuses
  statuses: read
  checks: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    # Run only if the PR *author* is 'dallae' (more robust than github.actor)
    if: github.event.pull_request.user.login == 'dallae'
    steps:
      - name: Checkout code
        # Updated to the latest version
        uses: actions/checkout@v4

      - name: Get Pull Request Details
        id: pr_details
        run: |
          echo "Pull Request Number: ${{ github.event.pull_request.number }}"
          echo "Pull Request Title: ${{ github.event.pull_request.title }}"
          echo "Pull Request URL: ${{ github.event.pull_request.html_url }}"
          echo "Commit SHA: ${{ github.event.pull_request.head.sha }}"

      # Diagnostics logging
      - name: Diagnose Initial Status Checks
        id: diagnostics
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }} # Use PAT for consistency if needed for merge later
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            console.log("\nPR Mergeable Status (Initial Check):");
            console.log(`- Mergeable: ${pr.mergeable}`);
            console.log(`- Mergeable State: ${pr.mergeable_state}`);

            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });
            console.log(`\nTotal check runs found: ${checks.total_count}`);
            if (checks.check_runs.length > 0) {
              console.log("Initial Check Run Statuses:");
              for (const check of checks.check_runs) {
                console.log(`- ${check.name}: ${check.status} (${check.conclusion || 'N/A'})`);
              }
            } else {
              console.log("No check runs found yet for this ref.");
            }

            try {
              const { data: branch } = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: context.payload.pull_request.base.ref
              });
              if (branch.protection && branch.protection.required_status_checks) {
                console.log("\nRequired Status Checks Found:");
                console.log(`- Strict: ${branch.protection.required_status_checks.strict}`);
                console.log(`- Contexts: ${JSON.stringify(branch.protection.required_status_checks.contexts)}`);
              } else {
                 console.log("\nNo required status checks found in branch protection.");
              }
            } catch (error) {
               console.log("\nError fetching branch protection rules:", error.message);
            }

      # --- Use dedicated action to wait for the required check ---
      - name: Wait for Validate Check to Succeed
        id: wait_for_validate
        # Consistent version with what's actually being used
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          # Name of the check run to wait for (must match the required check context name exactly)
          check-name: 'validate'
          # Use PAT if required for private repos or checks initiated by PATs, otherwise GITHUB_TOKEN might work
          repo-token: ${{ secrets.PAT }}
          # Specify the exact commit SHA of the pull request head
          ref: ${{ github.event.pull_request.head.sha }}
          # Conclusions that are considered successful (default is 'success')
          allowed-conclusions: success
          # How often to poll the API (seconds)
          wait-interval: 15
          verbose: true

      # Added debug step to verify output value
      - name: Debug Wait-On-Check Outputs
        run: |
          echo "wait_for_validate.conclusion: ${{ steps.wait_for_validate.outputs.conclusion }}"
          echo "wait_for_validate.status: ${{ steps.wait_for_validate.outputs.status }}"
          echo "All outputs: ${{ toJSON(steps.wait_for_validate.outputs) }}"

      # --- Perform the merge only if the wait action succeeded ---
      - name: Auto-Merge PR
        # Updated condition to check both output formats that might be present
        if: |
          steps.wait_for_validate.outputs.conclusion == 'success' || 
          steps.wait_for_validate.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            console.log('Attempting to merge PR #${{ github.event.pull_request.number }} after required checks passed.');

            try {
              // Optional: Double-check mergeability right before merging
              const { data: pr } = await github.rest.pulls.get({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 pull_number: context.payload.pull_request.number
              });

              if (pr.mergeable !== true || pr.mergeable_state === 'blocked' || pr.mergeable_state === 'dirty') {
                 const message = `❌ Auto-merge aborted. PR became unmergeable just before merge attempt. State: ${pr.mergeable_state}`;
                 console.error(message);
                 await github.rest.issues.createComment({
                   owner: context.repo.owner,
                   repo: context.repo.repo,
                   issue_number: context.payload.pull_request.number,
                   body: message
                 });
                 // Force the step to fail
                 core.setFailed(message);
                 return;
              }

              console.log(`PR state is '${pr.mergeable_state}', proceeding with merge.`);
              const { data: mergeResult } = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                merge_method: 'rebase'  // Using rebase method as specified
              });

              console.log('PR merged successfully!');
              console.log(`Message: ${mergeResult.message}`);
              console.log(`SHA: ${mergeResult.sha}`);

              // Add a success comment to the PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '✅ This PR was automatically merged by the Auto-Merge workflow because it was created by the repository owner and required checks passed.'
              });

            } catch (error) {
              console.error('Failed to merge PR:', error.message);

              // Add a failure comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `❌ Auto-merge failed: ${error.message}`
              });
              // Force the step to fail
              core.setFailed(error.message);
            }
